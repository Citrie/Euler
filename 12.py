# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
from lib import *

def organize_list(prime_factor_list):
    """prensent the factor list as 'prime_1, counts', 'prime_2, counts', ..."""
    new_list = []
    prime_factor_list.sort()

    while len(prime_factor_list) != 0:
        counts = prime_factor_list.count(prime_factor_list[0])
        new_list.append([prime_factor_list[0],counts])
        prime_factor_list = prime_factor_list[counts:]
    return new_list

def num_divisors(num):
    num_divisors = 1
    pf_list, power_list = prime_factors(num)
    for i in range(len(power_list)):
        num_divisors *= power_list[i]+1
    return num_divisors

i=1
while i:
    a = (i+1)/2 if i%2 else i+1
    b = i/2 if (i-1)%2 else i
    if num_divisors(a)*num_divisors(b)>500: break
    i += 1
print i, i*(i+1)/2
# print prime_factors(150)
# print num_divisors(140)